import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'
import { type CookieOptions, createServerClient } from '@supabase/ssr'

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url)
  const code = searchParams.get('code')
  const next = searchParams.get('next') ?? '/'
  const error = searchParams.get('error')
  const errorDescription = searchParams.get('error_description')

  console.log('[OAuth Callback] Received callback:', {
    hasCode: !!code,
    codePrefix: code?.substring(0, 8),
    next,
    error,
    errorDescription,
    origin,
    fullUrl: request.url
  })

  // Handle OAuth provider errors
  if (error) {
    console.error('[OAuth Callback] Provider error:', error, errorDescription)
    return NextResponse.redirect(`${origin}/auth/error?reason=provider&error=${error}`)
  }

  if (code) {
    const cookieStore = await cookies()
    
    // Log all cookies to debug PKCE verifier
    const allCookies = cookieStore.getAll()
    console.log('[OAuth Callback] Available cookies:', allCookies.map(c => ({
      name: c.name,
      hasValue: !!c.value,
      length: c.value?.length
    })))

    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            const value = cookieStore.get(name)?.value
            console.log(`[OAuth Callback] Cookie GET ${name}:`, value ? 'found' : 'not found')
            return value
          },
          set(name: string, value: string, options: CookieOptions) {
            console.log(`[OAuth Callback] Cookie SET ${name}`, { valueLength: value?.length, options })
            cookieStore.set({ name, value, ...options })
          },
          remove(name: string, options: CookieOptions) {
            console.log(`[OAuth Callback] Cookie REMOVE ${name}`)
            cookieStore.delete(name)
          },
        },
      }
    )

    console.log('[OAuth Callback] Attempting code exchange...')
    const { error: exchangeError } = await supabase.auth.exchangeCodeForSession(code)
    
    if (!exchangeError) {
      console.log('[OAuth Callback] Code exchange successful, redirecting to:', `${origin}${next}`)
      return NextResponse.redirect(`${origin}${next}`)
    }
    
    console.error('[OAuth Callback] Code exchange failed:', {
      error: exchangeError,
      message: exchangeError.message,
      name: exchangeError.name,
      details: JSON.stringify(exchangeError)
    })
    return NextResponse.redirect(`${origin}/auth/error?reason=exchange&message=${encodeURIComponent(exchangeError.message)}`)
  }

  // No code parameter
  console.error('[OAuth Callback] No code parameter received')
  return NextResponse.redirect(`${origin}/auth/error?reason=no_code`)
}